module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLoginAttempt {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type LoginAttempt {
  id: ID!
  successful: Boolean!
  badEmail: Boolean
  badPassword: Boolean
  email: String
  password: String
  authToken: String
  time: DateTime!
  ip: String!
}

type LoginAttemptConnection {
  pageInfo: PageInfo!
  edges: [LoginAttemptEdge]!
  aggregate: AggregateLoginAttempt!
}

input LoginAttemptCreateInput {
  successful: Boolean!
  badEmail: Boolean
  badPassword: Boolean
  email: String
  password: String
  authToken: String
  time: DateTime!
  ip: String!
}

type LoginAttemptEdge {
  node: LoginAttempt!
  cursor: String!
}

enum LoginAttemptOrderByInput {
  id_ASC
  id_DESC
  successful_ASC
  successful_DESC
  badEmail_ASC
  badEmail_DESC
  badPassword_ASC
  badPassword_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  authToken_ASC
  authToken_DESC
  time_ASC
  time_DESC
  ip_ASC
  ip_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LoginAttemptPreviousValues {
  id: ID!
  successful: Boolean!
  badEmail: Boolean
  badPassword: Boolean
  email: String
  password: String
  authToken: String
  time: DateTime!
  ip: String!
}

type LoginAttemptSubscriptionPayload {
  mutation: MutationType!
  node: LoginAttempt
  updatedFields: [String!]
  previousValues: LoginAttemptPreviousValues
}

input LoginAttemptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LoginAttemptWhereInput
  AND: [LoginAttemptSubscriptionWhereInput!]
  OR: [LoginAttemptSubscriptionWhereInput!]
  NOT: [LoginAttemptSubscriptionWhereInput!]
}

input LoginAttemptUpdateInput {
  successful: Boolean
  badEmail: Boolean
  badPassword: Boolean
  email: String
  password: String
  authToken: String
  time: DateTime
  ip: String
}

input LoginAttemptUpdateManyMutationInput {
  successful: Boolean
  badEmail: Boolean
  badPassword: Boolean
  email: String
  password: String
  authToken: String
  time: DateTime
  ip: String
}

input LoginAttemptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  successful: Boolean
  successful_not: Boolean
  badEmail: Boolean
  badEmail_not: Boolean
  badPassword: Boolean
  badPassword_not: Boolean
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  authToken: String
  authToken_not: String
  authToken_in: [String!]
  authToken_not_in: [String!]
  authToken_lt: String
  authToken_lte: String
  authToken_gt: String
  authToken_gte: String
  authToken_contains: String
  authToken_not_contains: String
  authToken_starts_with: String
  authToken_not_starts_with: String
  authToken_ends_with: String
  authToken_not_ends_with: String
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  ip: String
  ip_not: String
  ip_in: [String!]
  ip_not_in: [String!]
  ip_lt: String
  ip_lte: String
  ip_gt: String
  ip_gte: String
  ip_contains: String
  ip_not_contains: String
  ip_starts_with: String
  ip_not_starts_with: String
  ip_ends_with: String
  ip_not_ends_with: String
  AND: [LoginAttemptWhereInput!]
  OR: [LoginAttemptWhereInput!]
  NOT: [LoginAttemptWhereInput!]
}

input LoginAttemptWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLoginAttempt(data: LoginAttemptCreateInput!): LoginAttempt!
  updateLoginAttempt(data: LoginAttemptUpdateInput!, where: LoginAttemptWhereUniqueInput!): LoginAttempt
  updateManyLoginAttempts(data: LoginAttemptUpdateManyMutationInput!, where: LoginAttemptWhereInput): BatchPayload!
  upsertLoginAttempt(where: LoginAttemptWhereUniqueInput!, create: LoginAttemptCreateInput!, update: LoginAttemptUpdateInput!): LoginAttempt!
  deleteLoginAttempt(where: LoginAttemptWhereUniqueInput!): LoginAttempt
  deleteManyLoginAttempts(where: LoginAttemptWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  loginAttempt(where: LoginAttemptWhereUniqueInput!): LoginAttempt
  loginAttempts(where: LoginAttemptWhereInput, orderBy: LoginAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LoginAttempt]!
  loginAttemptsConnection(where: LoginAttemptWhereInput, orderBy: LoginAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LoginAttemptConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  loginAttempt(where: LoginAttemptSubscriptionWhereInput): LoginAttemptSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  authTokens: [String!]!
  signedUpOn: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateauthTokensInput {
  set: [String!]
}

input UserCreateInput {
  email: String!
  password: String!
  authTokens: UserCreateauthTokensInput
  signedUpOn: DateTime!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  signedUpOn_ASC
  signedUpOn_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  authTokens: [String!]!
  signedUpOn: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateauthTokensInput {
  set: [String!]
}

input UserUpdateInput {
  email: String
  password: String
  authTokens: UserUpdateauthTokensInput
  signedUpOn: DateTime
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  authTokens: UserUpdateauthTokensInput
  signedUpOn: DateTime
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  signedUpOn: DateTime
  signedUpOn_not: DateTime
  signedUpOn_in: [DateTime!]
  signedUpOn_not_in: [DateTime!]
  signedUpOn_lt: DateTime
  signedUpOn_lte: DateTime
  signedUpOn_gt: DateTime
  signedUpOn_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    