// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  loginAttempt: (where?: LoginAttemptWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  loginAttempt: (where: LoginAttemptWhereUniqueInput) => LoginAttemptPromise;
  loginAttempts: (
    args?: {
      where?: LoginAttemptWhereInput;
      orderBy?: LoginAttemptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LoginAttempt>;
  loginAttemptsConnection: (
    args?: {
      where?: LoginAttemptWhereInput;
      orderBy?: LoginAttemptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LoginAttemptConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLoginAttempt: (data: LoginAttemptCreateInput) => LoginAttemptPromise;
  updateLoginAttempt: (
    args: { data: LoginAttemptUpdateInput; where: LoginAttemptWhereUniqueInput }
  ) => LoginAttemptPromise;
  updateManyLoginAttempts: (
    args: {
      data: LoginAttemptUpdateManyMutationInput;
      where?: LoginAttemptWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertLoginAttempt: (
    args: {
      where: LoginAttemptWhereUniqueInput;
      create: LoginAttemptCreateInput;
      update: LoginAttemptUpdateInput;
    }
  ) => LoginAttemptPromise;
  deleteLoginAttempt: (
    where: LoginAttemptWhereUniqueInput
  ) => LoginAttemptPromise;
  deleteManyLoginAttempts: (
    where?: LoginAttemptWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  loginAttempt: (
    where?: LoginAttemptSubscriptionWhereInput
  ) => LoginAttemptSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LoginAttemptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "successful_ASC"
  | "successful_DESC"
  | "badEmail_ASC"
  | "badEmail_DESC"
  | "badPassword_ASC"
  | "badPassword_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "time_ASC"
  | "time_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "signedUpOn_ASC"
  | "signedUpOn_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LoginAttemptWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LoginAttemptWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  successful?: Boolean;
  successful_not?: Boolean;
  badEmail?: Boolean;
  badEmail_not?: Boolean;
  badPassword?: Boolean;
  badPassword_not?: Boolean;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  AND?: LoginAttemptWhereInput[] | LoginAttemptWhereInput;
  OR?: LoginAttemptWhereInput[] | LoginAttemptWhereInput;
  NOT?: LoginAttemptWhereInput[] | LoginAttemptWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  signedUpOn?: DateTimeInput;
  signedUpOn_not?: DateTimeInput;
  signedUpOn_in?: DateTimeInput[] | DateTimeInput;
  signedUpOn_not_in?: DateTimeInput[] | DateTimeInput;
  signedUpOn_lt?: DateTimeInput;
  signedUpOn_lte?: DateTimeInput;
  signedUpOn_gt?: DateTimeInput;
  signedUpOn_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LoginAttemptCreateInput {
  successful: Boolean;
  badEmail?: Boolean;
  badPassword?: Boolean;
  email?: String;
  password?: String;
  time: DateTimeInput;
}

export interface LoginAttemptUpdateInput {
  successful?: Boolean;
  badEmail?: Boolean;
  badPassword?: Boolean;
  email?: String;
  password?: String;
  time?: DateTimeInput;
}

export interface LoginAttemptUpdateManyMutationInput {
  successful?: Boolean;
  badEmail?: Boolean;
  badPassword?: Boolean;
  email?: String;
  password?: String;
  time?: DateTimeInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  signedUpOn: DateTimeInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  signedUpOn?: DateTimeInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  signedUpOn?: DateTimeInput;
}

export interface LoginAttemptSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LoginAttemptWhereInput;
  AND?:
    | LoginAttemptSubscriptionWhereInput[]
    | LoginAttemptSubscriptionWhereInput;
  OR?:
    | LoginAttemptSubscriptionWhereInput[]
    | LoginAttemptSubscriptionWhereInput;
  NOT?:
    | LoginAttemptSubscriptionWhereInput[]
    | LoginAttemptSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface LoginAttempt {
  id: ID_Output;
  successful: Boolean;
  badEmail?: Boolean;
  badPassword?: Boolean;
  email?: String;
  password?: String;
  time: DateTimeOutput;
}

export interface LoginAttemptPromise
  extends Promise<LoginAttempt>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  successful: () => Promise<Boolean>;
  badEmail: () => Promise<Boolean>;
  badPassword: () => Promise<Boolean>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  time: () => Promise<DateTimeOutput>;
}

export interface LoginAttemptSubscription
  extends Promise<AsyncIterator<LoginAttempt>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  successful: () => Promise<AsyncIterator<Boolean>>;
  badEmail: () => Promise<AsyncIterator<Boolean>>;
  badPassword: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LoginAttemptConnection {
  pageInfo: PageInfo;
  edges: LoginAttemptEdge[];
}

export interface LoginAttemptConnectionPromise
  extends Promise<LoginAttemptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LoginAttemptEdge>>() => T;
  aggregate: <T = AggregateLoginAttemptPromise>() => T;
}

export interface LoginAttemptConnectionSubscription
  extends Promise<AsyncIterator<LoginAttemptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LoginAttemptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLoginAttemptSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LoginAttemptEdge {
  node: LoginAttempt;
  cursor: String;
}

export interface LoginAttemptEdgePromise
  extends Promise<LoginAttemptEdge>,
    Fragmentable {
  node: <T = LoginAttemptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LoginAttemptEdgeSubscription
  extends Promise<AsyncIterator<LoginAttemptEdge>>,
    Fragmentable {
  node: <T = LoginAttemptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLoginAttempt {
  count: Int;
}

export interface AggregateLoginAttemptPromise
  extends Promise<AggregateLoginAttempt>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLoginAttemptSubscription
  extends Promise<AsyncIterator<AggregateLoginAttempt>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  signedUpOn: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  signedUpOn: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  signedUpOn: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LoginAttemptSubscriptionPayload {
  mutation: MutationType;
  node: LoginAttempt;
  updatedFields: String[];
  previousValues: LoginAttemptPreviousValues;
}

export interface LoginAttemptSubscriptionPayloadPromise
  extends Promise<LoginAttemptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LoginAttemptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LoginAttemptPreviousValuesPromise>() => T;
}

export interface LoginAttemptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LoginAttemptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LoginAttemptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LoginAttemptPreviousValuesSubscription>() => T;
}

export interface LoginAttemptPreviousValues {
  id: ID_Output;
  successful: Boolean;
  badEmail?: Boolean;
  badPassword?: Boolean;
  email?: String;
  password?: String;
  time: DateTimeOutput;
}

export interface LoginAttemptPreviousValuesPromise
  extends Promise<LoginAttemptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  successful: () => Promise<Boolean>;
  badEmail: () => Promise<Boolean>;
  badPassword: () => Promise<Boolean>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  time: () => Promise<DateTimeOutput>;
}

export interface LoginAttemptPreviousValuesSubscription
  extends Promise<AsyncIterator<LoginAttemptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  successful: () => Promise<AsyncIterator<Boolean>>;
  badEmail: () => Promise<AsyncIterator<Boolean>>;
  badPassword: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  signedUpOn: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  signedUpOn: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  signedUpOn: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "LoginAttempt",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
